const fs = require('fs').promises;
const path = require('path');
const db = require('../../config/database');

const runMigrations = async () => {
  try {
    console.log('üöÄ Iniciando execu√ß√£o das migra√ß√µes...');

    // Testar conex√£o
    const connected = await db.testConnection();
    if (!connected) {
      throw new Error('N√£o foi poss√≠vel conectar ao banco de dados');
    }

    // Diret√≥rio das migra√ß√µes
    const migrationsDir = __dirname;
    
    // Ler arquivos de migra√ß√£o
    const files = await fs.readdir(migrationsDir);
    const migrationFiles = files
      .filter(file => file.endsWith('.sql'))
      .sort(); // Ordenar para executar em ordem

    if (migrationFiles.length === 0) {
      console.log('üìù Nenhuma migra√ß√£o encontrada');
      return;
    }

    console.log(`üìã Encontradas ${migrationFiles.length} migra√ß√µes:`);
    migrationFiles.forEach(file => console.log(`   - ${file}`));

    // Executar cada migra√ß√£o
    for (const file of migrationFiles) {
      console.log(`\n‚ö° Executando migra√ß√£o: ${file}`);
      
      const filePath = path.join(migrationsDir, file);
      const sql = await fs.readFile(filePath, 'utf8');
      
      try {
        await db.query(sql);
        console.log(`‚úÖ Migra√ß√£o ${file} executada com sucesso`);
      } catch (error) {
        console.error(`‚ùå Erro na migra√ß√£o ${file}:`, error.message);
        throw error;
      }
    }

    console.log('\nüéâ Todas as migra√ß√µes foram executadas com sucesso!');

    // Verificar se a tabela foi criada
    const result = await db.query(`
      SELECT table_name, column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'usuarios' 
      ORDER BY ordinal_position
    `);

    if (result.rows.length > 0) {
      console.log('\nüìä Estrutura da tabela usuarios criada:');
      result.rows.forEach(row => {
        console.log(`   - ${row.column_name}: ${row.data_type}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro durante execu√ß√£o das migra√ß√µes:', error.message);
    process.exit(1);
  } finally {
    await db.close();
  }
};

// Executar migra√ß√µes se este arquivo for chamado diretamente
if (require.main === module) {
  runMigrations();
}

module.exports = { runMigrations }; 